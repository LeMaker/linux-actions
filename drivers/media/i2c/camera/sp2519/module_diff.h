/*
 * module different macro
 *
 * Copyright (C) 2008 Renesas Solutions Corp.
 * Kuninori Morimoto <morimoto.kuninori@renesas.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __MODULE_DIFF_H__
#define __MODULE_DIFF_H__

#include "./../module_comm/module_comm.h"

#define CAMERA_MODULE_NAME 		"sp2519"

#define MODULE_I2C_REAL_ADDRESS		(0x60>>1)
#define MODULE_I2C_REG_ADDRESS		(0x60>>1)
#define I2C_REGS_WIDTH			1
#define I2C_DATA_WIDTH			1

#define OUTTO_SENSO_CLOCK 		24000000

#define DEFAULT_HSYNC_ACTIVE_LEVEL 		V4L2_MBUS_HSYNC_ACTIVE_HIGH
#define DEFAULT_VSYNC_ACTIVE_LEVEL		V4L2_MBUS_VSYNC_ACTIVE_HIGH
#define DEFAULT_PCLK_SAMPLE_EDGE      	V4L2_MBUS_PCLK_SAMPLE_FALLING
#define DEFAULT_POWER_LINE_FREQUENCY	V4L2_CID_POWER_LINE_FREQUENCY_50HZ

#define MODULE_DEFAULT_WIDTH	WIDTH_VGA
#define MODULE_DEFAULT_HEIGHT	HEIGHT_VGA
#define MODULE_MAX_WIDTH		WIDTH_UXGA
#define MODULE_MAX_HEIGHT		HEIGHT_UXGA

#define AHEAD_LINE_NUM			15    //10行 = 50次循环
#define DROP_NUM_CAPTURE		3
#define DROP_NUM_PREVIEW		5


#define  SP2519_720P  //for 720P  20141223 Kavie

static unsigned int frame_rate_vga[]  = {30,};
static unsigned int frame_rate_svga[]   = {30,};
static unsigned int frame_rate_uxga[]   = {15,};
static unsigned int frame_rate_720p[]	= {15,};


static const struct regval_list module_init_regs[] =
{
	//===========================================================
	//note:SP2519 MCLK=24MHZ 2.5PLL 8-11.2fps output size:1600*1200
	//===========================================================
	{0xfd, 0x01},
	{0x36, 0x02},
	{0xfd, 0x00},
	{0x30, 0x00},//0x0c
	{0x2f, 0x11},
	{0x09, 0x01},
	{0xfd, 0x00},
	{0x0c, 0x55},
	{0x27, 0xa5},
	{0x1a, 0x4b},
	{0x20, 0x2f},
	{0x22, 0x5a},
	{0x25, 0xad},
	{0x21, 0x0d},
	{0x28, 0x08},//若系统列噪声偏大，可以适当增加0x28 = 0x09~0x0b，不要超过0x0b
	{0x1d, 0x01},//若手机平台有行噪声，则0x1d = 0x00
	{0x7a, 0x5d},
	{0x70, 0x41},
	{0x74, 0x40},
	{0x75, 0x40},
	{0x15, 0x3e},
	{0x71, 0x3f},
	{0x7c, 0x3f},
	{0x76, 0x3f},
	{0x7e, 0x29},
	{0x72, 0x29},
	{0x77, 0x28},
	{0x1e, 0x01},
	{0x1c, 0x0f},
	{0x2e, 0xc5},
	{0x1f, 0xc0},
	{0x6c, 0x00},
	{0xfd, 0x01},
	{0x32, 0x00},
	{0xfd, 0x02},
	{0x85, 0x00},

	//24M 50HZ 2.5PLL 8-11.2fps uxga
	{0xfd, 0x00},
	{0x03, 0x03},
	{0x04, 0x42},
	{0x05, 0x00},
	{0x06, 0x00},
	{0x07, 0x00},
	{0x08, 0x00},
	{0x09, 0x00},
	{0x0a, 0x9d},
	{0xfd, 0x01},
	{0xf0, 0x00},
	{0xf7, 0x8b},
	{0xf8, 0x74},
	{0x02, 0x0c},
	{0x03, 0x01},
	{0x06, 0x8b},
	{0x07, 0x00},
	{0x08, 0x01},
	{0x09, 0x00},
	{0xfd, 0x02},
	{0x3d, 0x0f},
	{0x3e, 0x74},
	{0x3f, 0x00},
	{0x88, 0xae},
	{0x89, 0x69},
	{0x8a, 0x43},
	{0xfd, 0x02},
	{0xbe, 0x84},
	{0xbf, 0x06},
	{0xd0, 0x84},
	{0xd1, 0x06},
	{0xc9, 0x84},
	{0xca, 0x06},                                                                                             

	{0xb8, 0x70}, //mean_nr_dummy    
	{0xb9, 0x80},  //mean_dummy_nr    
	{0xba, 0x30},  //mean_dummy_low   
	{0xbb, 0x45},  //mean_low_dummy   
	{0xbc, 0x90},  //rpc_heq_low      
	{0xbd, 0x70},  //rpc_heq_dummy    
	{0xfd, 0x03},                    
	{0x77, 0x48},  //rpc_heq_nr2      

	{0xfd, 0x01},
	{0xe0, 0x48},
	{0xe1, 0x38},
	{0xe2, 0x30},
	{0xe3, 0x2c},
	{0xe4, 0x2c},
	{0xe5, 0x2a},
	{0xe6, 0x2a},
	{0xe7, 0x28},
	{0xe8, 0x28},
	{0xe9, 0x28},
	{0xea, 0x26},
	{0xf3, 0x26},
	{0xf4, 0x26},
	{0xfd, 0x01},  //ae min gain    
	{0x04, 0xc0},  //rpc_max_indr   
	{0x05, 0x26},  //rpc_min_indr   
	{0x0a, 0x48},  //rpc_max_outdr  
	{0x0b, 0x26},  //rpc_min_outdr  

	{0xfd, 0x01},   //ae target                     
	{0xf2, 0x09},                
	{0xeb, 0x78},   //target_indr	
	{0xec, 0x78},   //target_outdr	
	{0xed, 0x06},   //lock_range    
	{0xee, 0x0a},   //hold_range    

	{0xfd, 0x02},      
	{0x4f, 0x46},    //dem_morie_thr              
	         
	{0xfd, 0x03},
	{0x52, 0xff}, //dpix_wht_ofst_outdoor        
	{0x53, 0x60}, //dpix_wht_ofst_normal1        
	{0x94, 0x00},//20 //dpix_wht_ofst_normal2        
	{0x54, 0x00}, //dpix_wht_ofst_dummy          
	{0x55, 0x00}, //dpix_wht_ofst_low            
	           
	{0x56, 0x80}, //dpix_blk_ofst_outdoor        
	{0x57, 0x80}, //dpix_blk_ofst_normal1        
	{0x95, 0x00},//80 //dpix_blk_ofst_normal2        
	{0x58, 0x00}, //dpix_blk_ofst_dummy          
	{0x59, 0x00}, //dpix_blk_ofst_low            
	           
	{0x5a, 0xf6}, //dpix_wht_ratio               
	{0x5b, 0x00},                               
	{0x5c, 0x88}, //dpix_blk_ratio               
	{0x5d, 0x00},                               
	{0x96, 0x00},//68 //dpix_wht/blk_ratio_nr2       

	{0xfd, 0x03},
	{0x8a, 0x00},
	{0x8b, 0x00},
	{0x8c, 0xff},

	{0x22, 0xff}, //dem_gdif_thr_outdoor    
	{0x23, 0xff}, //dem_gdif_thr_normal     
	{0x24, 0xff}, //dem_gdif_thr_dummy      
	{0x25, 0xff}, //dem_gdif_thr_low        
	     
	{0x5e, 0xff}, //dem_gwnd_wht_outdoor    
	{0x5f, 0xff}, //dem_gwnd_wht_normal     
	{0x60, 0xff}, //dem_gwnd_wht_dummy      
	{0x61, 0xff}, //dem_gwnd_wht_low        
	{0x62, 0x00}, //dem_gwnd_blk_outdoor    
	{0x63, 0x00}, //dem_gwnd_blk_normal     
	{0x64, 0x00}, //dem_gwnd_blk_dummy      
	{0x65, 0x00}, //dem_gwnd_blk_low        

	{0xfd, 0x01},
	{0x21, 0x00},  //lsc_sig_ru lsc_sig_lu             
	{0x22, 0x00},  //lsc_sig_rd lsc_sig_ld             
	{0x26, 0x60},  //lsc_gain_thr                      
	{0x27, 0x14},  //lsc_exp_thrl                      
	{0x28, 0x05},  //lsc_exp_thrh                      
	{0x29, 0x00},  //lsc_dec_fac     进dummy态退shading 功能有问题，需关掉                  
	{0x2a, 0x01},  //lsc_rpc_en lens 衰减自适应        
	                                            
	{0xfd, 0x01},                                     
	{0xa1, 0x1D},  //lsc_rsx_l                                       
	{0xa2, 0x20},  //lsc_rsx_r                         
	{0xa3, 0x20},  //lsc_rsy_u                         
	{0xa4, 0x1D},  //lsc_rsy_d                         
	{0xa5, 0x1D},  //lsc_gxy_l                         
	{0xa6, 0x1D},  //lsc_gxy_r                         
	{0xa7, 0x22},  //lsc_gxy_l                         
	{0xa8, 0x1b},  //lsc_gxy_r                         
	{0xa9, 0x1c},  //lsc_bsx_l                         
	{0xaa, 0x1e},  //lsc_bsx_r                         
	{0xab, 0x1e},  //lsc_bsy_u                         
	{0xac, 0x1c},  //lsc_bsy_d                         
	{0xad, 0x0a},  //lsc_rxy_lu                        
	{0xae, 0x09},  //lsc_rxy_ru                        
	{0xaf, 0x05},  //lsc_rxy_ld                        
	{0xb0, 0x05},  //lsc_rxy_rd                        
	{0xb1, 0x0A},  //lsc_gsx_lu                        
	{0xb2, 0x0a},  //lsc_gsx_ru                        
	{0xb3, 0x05},  //lsc_gsy_ud                        
	{0xb4, 0x07},  //lsc_gsy_dd                        
	{0xb5, 0x0A},  //lsc_bxy_lu                        
	{0xb6, 0x0a},  //lsc_bxy_ru                        
	{0xb7, 0x04},  //lsc_bxy_ld                        
	{0xb8, 0x07},  //lsc_bxy_rd                         
	                           
	{0xfd, 0x02},
	{0x26, 0xa0},  //Red channel gain                                 
	{0x27, 0x96},  //Blue channel gain                                
	{0x28, 0xcc},  //Y top value limit                                
	{0x29, 0x01},  //Y bot value limit                                
	{0x2a, 0x00},  //rg_limit_log                                     
	{0x2b, 0x00},  //bg_limit_log                                     
	{0x2c, 0x20},  //Awb image center row start                       
	{0x2d, 0xdc},  //Awb image center row end                         
	{0x2e, 0x20},  //Awb image center col start                       
	{0x2f, 0x96},  //Awb image center col end                         
	{0x1b, 0x80},  //b,g mult a constant for detect white pixel       
	{0x1a, 0x80},  //r,g mult a constant for detect white pixel       
	{0x18, 0x16},  //wb_fine_gain_step,wb_rough_gain_step             
	{0x19, 0x26},  //wb_dif_fine_th, wb_dif_rough_th                  
	{0x1d, 0x04},  //skin detect u bot                                 
	{0x1f, 0x06},  //skin detect v bot                                

{0x66, 0x36},
{0x67, 0x5c},
{0x68, 0xbb},
{0x69, 0xdf},
{0x6a, 0xa5},

{0x7c, 0x26},
{0x7d, 0x4A},
{0x7e, 0xe0},
{0x7f, 0x05},
{0x80, 0xa6},

{0x70, 0x21},
{0x71, 0x41},
{0x72, 0x05},
{0x73, 0x25},
{0x74, 0xaa},

{0x6b, 0x00},
{0x6c, 0x20},
{0x6d, 0x0e},
{0x6e, 0x2a},
{0x6f, 0xaa},

{0x61, 0xdb},
{0x62, 0xfe},
{0x63, 0x37},
{0x64, 0x56},
{0x65, 0x5a},

{0x75, 0x00},
{0x76, 0x09},
{0x77, 0x02},
{0x0e, 0x16},
{0x3b, 0x09},

{0xfd, 0x02}, //awb outdoor mode               
{0x02, 0x00}, //outdoor exp 5msb   
{0x03, 0x10}, //outdoor exp 8lsb   
{0x04, 0xf0}, //outdoor rpc        
{0xf5, 0xb3}, //outdoor rgain top  
{0xf6, 0x80}, //outdoor rgain bot  
{0xf7, 0xe0}, //outdoor bgain top  
{0xf8, 0x89}, //outdoor bgain bot  
           
{0xfd, 0x02},
{0x08, 0x00},
{0x09, 0x04},

{0xfd, 0x02},
{0xdd, 0x0f}, //raw smooth en 
{0xde, 0x0f}, //sharpen en    

{0xfd, 0x02}, // sharp               
{0x57, 0x30}, //raw_sharp_y_base     
{0x58, 0x10}, //raw_sharp_y_min      
{0x59, 0xe0}, //raw_sharp_y_max      
{0x5a, 0x00}, //raw_sharp_rangek_neg 
{0x5b, 0x12}, //raw_sharp_rangek_pos 

{0xcb, 0x08}, //raw_sharp_range_base_outdoor	
{0xcc, 0x0b}, //raw_sharp_range_base_nr 	
{0xcd, 0x10}, //raw_sharp_range_base_dummy	
{0xce, 0x1a}, //raw_sharp_range_base_low	

{0xfd, 0x03},
{0x87, 0x04}, //raw_sharp_range_ofst1	4x  
{0x88, 0x08}, //raw_sharp_range_ofst2	8x  
{0x89, 0x10}, //raw_sharp_range_ofst3	16x 

{0xfd, 0x02}, 
{0xe8, 0x58}, //sharpness gain for increasing pixel’s Y, in outdoor        
{0xec, 0x68}, //sharpness gain for decreasing pixel’s Y, in outdoor        
{0xe9, 0x60}, //sharpness gain for increasing pixel’s Y, in normal         
{0xed, 0x68}, //sharpness gain for decreasing pixel’s Y, in normal         
{0xea, 0x58}, //sharpness gain for increasing pixel’s Y,in dummy           
{0xee, 0x60}, //sharpness gain for decreasing pixel’s Y, in dummy          
{0xeb, 0x48}, //sharpness gain for increasing pixel’s Y,in lowlight        
{0xef, 0x40}, //sharpness gain for decreasing pixel’s Y, in low light      

{0xfd, 0x02}, //skin sharpen                                   
{0xdc, 0x04}, //skin_sharp_sel肤色降锐化                       
{0x05, 0x6f}, //skin_num_th2排除肤色降锐化对分辨率卡引起的干扰 

{0xfd, 0x02},
{0xf4, 0x30},  //raw_ymin           
{0xfd, 0x03},                      
{0x97, 0x98},  //raw_ymax_outdoor   
{0x98, 0x88},  //raw_ymax_normal    
{0x99, 0x88},  //raw_ymax_dummy     
{0x9a, 0x80},  //raw_ymax_low       
{0xfd, 0x02},                      
{0xe4, 0xff},  //raw_yk_fac_outdoor 
{0xe5, 0xff},  //raw_yk_fac_normal  
{0xe6, 0xff},  //raw_yk_fac_dummy   
{0xe7, 0xff},  //raw_yk_fac_low     

{0xfd, 0x03},
{0x72, 0x18},  //raw_lsc_fac_outdoor 
{0x73, 0x28},  //raw_lsc_fac_normal  
{0x74, 0x28},  //raw_lsc_fac_dummy   
{0x75, 0x30},  //raw_lsc_fac_low     

{0xfd, 0x02},
{0x78, 0x20},
{0x79, 0x20},
{0x7a, 0x14},
{0x7b, 0x08},

{0x81, 0x02},//raw_grgb_thr_outdoor  
{0x82, 0x20},
{0x83, 0x20},
{0x84, 0x08},

{0xfd, 0x03},
{0x7e, 0x06}, //raw_noise_base_outdoor                   
{0x7f, 0x0d}, //raw_noise_base_normal                    
{0x80, 0x10}, //raw_noise_base_dummy                     
{0x81, 0x16}, //raw_noise_base_low                       
{0x7c, 0xff}, //raw_noise_base_dark                      
{0x82, 0x54}, //raw_dns_fac_outdoor,raw_dns_fac_normal} 
{0x83, 0x43}, //raw_dns_fac_dummy,raw_dns_fac_low}         
{0x84, 0x00},  //raw_noise_ofst1 	4x                   
{0x85, 0x20},  //raw_noise_ofst2	8x                   
{0x86, 0x40}, //raw_noise_ofst3	16x    

{0xfd, 0x03},
{0x66, 0x18}, //pf_bg_thr_normal b-g>thr      
{0x67, 0x28}, //pf_rg_thr_normal r-g<thr      
{0x68, 0x20}, //pf_delta_thr_normal |val|>thr 
{0x69, 0x88}, //pf_k_fac val/16               
{0x9b, 0x18}, //pf_bg_thr_outdoor             
{0x9c, 0x28}, //pf_rg_thr_outdoor             
{0x9d, 0x20}, //pf_delta_thr_outdoor          

{0xfd, 0x01},
{0x8b, 0x00},
{0x8c, 0x0f},
{0x8d, 0x21},
{0x8e, 0x2c},
{0x8f, 0x37},
{0x90, 0x46},
{0x91, 0x53},
{0x92, 0x5e},
{0x93, 0x6a},
{0x94, 0x7d},
{0x95, 0x8d},
{0x96, 0x9e},
{0x97, 0xac},
{0x98, 0xba},
{0x99, 0xc6},
{0x9a, 0xd1},
{0x9b, 0xda},
{0x9c, 0xe4},
{0x9d, 0xeb},
{0x9e, 0xf2},
{0x9f, 0xf9},
{0xa0, 0xff}, 

{0xfd, 0x02}, 
{0x15, 0xa9}, 
{0x16, 0x84}, 

{0xa0, 0x97},
{0xa1, 0xea},
{0xa2, 0xff},
{0xa3, 0x0e},
{0xa4, 0x77},
{0xa5, 0xfa},
{0xa6, 0x08},
{0xa7, 0xcb},
{0xa8, 0xad},
{0xa9, 0x3c},
{0xaa, 0x30},
{0xab, 0x0c}, 
     
{0xac, 0x7f},
{0xad, 0x08},
{0xae, 0xf8},
{0xaf, 0xff},
{0xb0, 0x6e},
{0xb1, 0x13},
{0xb2, 0xd2},
{0xb3, 0x6e},
{0xb4, 0x40},
{0xb5, 0x30},
{0xb6, 0x03},
{0xb7, 0x1f},

{0xfd, 0x01},  //auto_sat                 
{0xd2, 0x2d},  //autosat_en[0]             
{0xd1, 0x38},  //lum thr in green enhance 
{0xdd, 0x3f}, 
{0xde, 0x37}, 

{0xfd, 0x02},
{0xc1, 0x40},
{0xc2, 0x40},
{0xc3, 0x40},
{0xc4, 0x40},
{0xc5, 0x80},
{0xc6, 0x60},
{0xc7, 0x00},
{0xc8, 0x00},


	{0xfd, 0x01},
	{0xd3, 0xa0},
	{0xd4, 0x9c},
	{0xd5, 0x94},
	{0xd6, 0x88},

	{0xd7, 0xa0},
	{0xd8, 0x9c},
	{0xd9, 0x94},
	{0xda, 0x88},

{0xfd, 0x03},
{0x76, 0x0a},
{0x7a, 0x40},
{0x7b, 0x40},

{0xfd, 0x01},
{0xc2, 0xaa},  //u_v_th_outdoor白色物体表面有彩色噪声降低此值    
{0xc3, 0xaa},  //u_v_th_nr                                       
{0xc4, 0x66},  //u_v_th_dummy                                    
{0xc5, 0x66},  //u_v_th_low          

{0xfd, 0x01},
{0xcd, 0x08},
{0xce, 0x18},

{0xfd, 0x02},
{0x32, 0x60},
{0x35, 0x60}, //uv_fix_dat 
{0x37, 0x13},

{0xfd, 0x01}, 
{0xdb, 0x00}, //buf_heq_offset    
{0x10, 0x88}, //ku_outdoor       
{0x11, 0x88}, //ku_nr            
{0x12, 0x90}, //ku_dummy         
{0x13, 0x90}, //ku_low           
{0x14, 0x9a}, //kl_outdoor       
{0x15, 0x9a}, //kl_nr            
{0x16, 0x8b}, //kl_dummy         
{0x17, 0x88}, //kl_low           

{0xfd, 0x03},
{0x00, 0x80}, //ctf_heq_mean	                          
{0x03, 0x68}, //ctf_range_thr   可以排除灰板场景的阈值   
{0x06, 0xd8}, //ctf_reg_max	                          
{0x07, 0x28}, //ctf_reg_min	                          
{0x0a, 0xfd}, //ctf_lum_ofst                             
{0x01, 0x16}, //ctf_posk_fac_outdoor                     
{0x02, 0x16}, //ctf_posk_fac_nr                          
{0x04, 0x16}, //ctf_posk_fac_dummy                       
{0x05, 0x16}, //ctf_posk_fac_low                         
{0x0c, 0x40}, //ctf_negk_fac_nr                          
{0x0b, 0x40}, //ctf_negk_fac_outdoor                     
{0x0d, 0x40}, //ctf_negk_fac_dummy                       
{0x0e, 0x40}, //ctf_negk_fac_low                         
{0x08, 0x0c}, 
{0x09, 0x0c}, 
 
{0xfd, 0x02}, //cnr                   
{0x8e, 0x0a}, //cnr_grad_thr_dummy    
{0x90, 0x40}, //20 //cnr_thr_outdoor   
{0x91, 0x40}, //20 //cnr_thr_nr        
{0x92, 0x60}, //60 //cnr_thr_dummy     
{0x93, 0x80}, //80 //cnr_thr_low       
{0x9e, 0x44}, 
{0x9f, 0x44}, 

{0xfd, 0x02}, //auto                                                
{0x85, 0x00}, //enable 50Hz/60Hz function[4]  [3:0] interval_line   
{0xfd, 0x01}, 
{0x00, 0x00}, //fix mode 
{0xfb, 0x25}, 
{0x32, 0x15}, //ae en 
{0x33, 0xef}, //lsc\bpc en
{0x34, 0xef},  //ynr[4]\cnr[0]\gamma[2]\colo[1]  
{0x35, 0x00},  //YUYV                            
{0xfd, 0x00},        
{0x3f, 0x00}, //mirror/flip    
{0xfd, 0x01}, 
{0x50, 0x00}, //heq_auto_mode 读状态 
{0x66, 0x00}, //effect               
{0xfd, 0x02}, 
{0xd6, 0x0f}, 

{0xfd, 0x00}, 
{0x1b, 0x30}, 
{0xfd, 0x01}, 
{0x36, 0x00}, 

	{0xfd, 0x02},
	{0x0f, 0x00},
	{0x8f, 0x03},
	{0xfd, 0x00}, 
	ENDMARKER,
};
/* 640*480: QVGA */
static const struct regval_list module_vga_regs[] = 
{
	{0xfd, 0x02},
	{0x40, 0x00},
	{0x41, 0x50},
	{0x42, 0x00},
	{0x43, 0x50},
	{0x44, 0x01},
	{0x45, 0xe0},
	{0x46, 0x02},
	{0x47, 0x80},
	{0x0f, 0x01},
	{0x8f, 0x02},
    {0xfd, 0x00},
    ENDMARKER,
};

/* 800*600: SVGA */
static const struct regval_list module_svga_regs[] = 
{
//window   //for uxga  20141223 Kavie
	{0xfd, 0x01},
	{0x4a, 0x00},
	{0x4b, 0x04},
	{0x4c, 0xb0},
	{0x4d, 0x00},
	{0x4e, 0x06},
	{0x4f, 0x40},
//close resize	
	{0xfd, 0x02},
	{0x40, 0x00},
	{0x41, 0x20},
	{0x42, 0x00},
	{0x43, 0x20},
	{0x44, 0x04},
	{0x45, 0xb0},
	{0x46, 0x06},
	{0x47, 0x40},
	{0x48, 0x00},
	{0xfd, 0x00},
	{0xfd, 0x02},
	{0x0f, 0x00},
	{0x8f, 0x03},
	{0xfd, 0x00},	
		
	
	{0xfd, 0x02},
	{0x40, 0x00},
	{0x41, 0x40},
	{0x42, 0x00},
	{0x43, 0x40},
	{0x44, 0x02},
	{0x45, 0x58},
	{0x46, 0x03},
	{0x47, 0x20},
	{0x48, 0x00},
	{0xfd, 0x00},
	{0xfd, 0x02},
	{0x0f, 0x01},
	{0x8f, 0x02},
	{0xfd, 0x00},
    ENDMARKER,
};
/* 1280*720: 720P */
static const struct regval_list module_720p_regs[] = 
{
#ifdef SP2519_720P //for 720P  20141223 Kavie
//window  
	{0xfd, 0x01},
	{0x4a, 0x96},
	{0x4b, 0x03},
	{0x4c, 0x84},
	{0x4d, 0x00},
	{0x4e, 0x06},
	{0x4f, 0x40},
//resize
	{0xfd, 0x02},
	{0x40, 0x00},
	{0x41, 0x28},
	{0x42, 0x00},
	{0x43, 0x28},
	{0x44, 0x03},
	{0x45, 0x84},
	{0x46, 0x06},
	{0x47, 0x40},
	{0x48, 0x00},
	{0xfd, 0x00},
	{0xfd, 0x02},
	{0x0f, 0x01},
	{0x8f, 0x02},
	{0xfd, 0x00},
 #endif

    ENDMARKER,
};

/* 1600*1200: UXGA */
static const struct regval_list module_uxga_regs[] = 
{
//window   //for uxga  20141223 Kavie
	{0xfd, 0x01},
	{0x4a, 0x00},
	{0x4b, 0x04},
	{0x4c, 0xb0},
	{0x4d, 0x00},
	{0x4e, 0x06},
	{0x4f, 0x40},
//close resize	
	{0xfd, 0x02},
	{0x40, 0x00},
	{0x41, 0x20},
	{0x42, 0x00},
	{0x43, 0x20},
	{0x44, 0x04},
	{0x45, 0xb0},
	{0x46, 0x06},
	{0x47, 0x40},
	{0x48, 0x00},
	{0xfd, 0x00},
	{0xfd, 0x02},
	{0x0f, 0x00},
	{0x8f, 0x03},
	{0xfd, 0x00},	
    ENDMARKER,
};
static const struct regval_list module_init_auto_focus[] =
{
ENDMARKER,
//  NULL
};
    
/*
 * window size list
 */
/* 640*480 */
static struct camera_module_win_size module_win_vga = {
	.name             = "VGA",
	.width            = WIDTH_VGA,
	.height           = HEIGHT_VGA,
	.win_regs         = module_vga_regs,
	.frame_rate_array = frame_rate_vga,
	.capture_only     = 0,
};

/* 800*600 */
static struct camera_module_win_size module_win_svga = {
	.name             = "SVGA",
	.width            = WIDTH_SVGA,
	.height           = HEIGHT_SVGA,
	.win_regs         = module_svga_regs,

	.frame_rate_array = frame_rate_svga,
	.capture_only     = 0,
};
/* 1280*720 */
static struct camera_module_win_size module_win_720p = {
	.name             = "720P",
	.width            = WIDTH_720P,
	.height           = HEIGHT_720P,
	.win_regs         = module_720p_regs,

	.frame_rate_array = frame_rate_720p,
	.capture_only     = 0,
};

/* 1600*1200 */
static struct camera_module_win_size module_win_uxga = {
	.name             = "UXGA",
	.width            = WIDTH_UXGA,
	.height           = HEIGHT_UXGA,
	.win_regs         = module_uxga_regs,
	.frame_rate_array = frame_rate_uxga,
	.capture_only     = 1,
};

static struct camera_module_win_size *module_win_list[] = {
	&module_win_vga,
	&module_win_svga,
	&module_win_720p,
	&module_win_uxga,
};
  
static struct regval_list module_whitebance_auto_regs[]=
{
{0xfd , 0x02},
{0x26 , 0xc1},
{0x27 , 0x88},	   
{0xfd , 0x01},
{0x32 , 0x15},

	ENDMARKER, 
};

/* Cloudy Colour Temperature : 6500K - 8000K  */
static struct regval_list module_whitebance_cloudy_regs[]=
{
{0xfd , 0x01},
{0x32 , 0x05},
{0xfd , 0x02},
{0x26 , 0xe2},
{0x27 , 0x82},
{0xfd , 0x00},
	ENDMARKER,
};

/* ClearDay Colour Temperature : 5000K - 6500K  */
static struct regval_list module_whitebance_sunny_regs[]=
{
{0xfd , 0x01},
{0x32 , 0x05},
{0xfd , 0x02},
{0x26 , 0xc1},
{0x27 , 0x88},
{0xfd , 0x00},
	ENDMARKER, 		
};

/* Office Colour Temperature : 3500K - 5000K ,荧光灯 */
static struct regval_list module_whitebance_fluorescent_regs[]=
{
{0xfd , 0x01},
{0x32 , 0x05},
{0xfd , 0x02},
{0x26 , 0xb4},
{0x27 , 0xc4},
{0xfd , 0x00},
	ENDMARKER,	
};

/* Home Colour Temperature : 2500K - 3500K ，白炽灯 */
static struct regval_list module_whitebance_incandescent_regs[]=
{
{0xfd , 0x01},
{0x32 , 0x05},
{0xfd , 0x02},
{0x26 , 0x7b},
{0x27 , 0xd3},
{0xfd , 0x00},

	ENDMARKER,
};
#if 0
/*正常模式*/
static struct regval_list module_effect_normal_regs[] =
{
	{0xfd, 0x01},
	{0x66, 0x00},
	{0x67, 0x80},
	{0x68, 0x80},
	{0xdb, 0x00},
	{0x34, 0xc7},
	{0xfd, 0x02},
	{0x14, 0x00},
	{0xfd, 0x00},
	ENDMARKER,
};

/*单色，黑白照片*/
static struct regval_list module_effect_white_black_regs[] =
{
	{0xfd, 0x01},
	{0x66, 0x20},
	{0x67, 0x80},
	{0x68, 0x80},
	{0xdb, 0x00},
	{0x34, 0xc7},
	{0xfd, 0x02},
	{0x14, 0x00},
	{0xfd, 0x00},
	ENDMARKER,
};

/*负片效果*/
static struct regval_list module_effect_negative_regs[] =
{
	{0xfd, 0x01},
	{0x66, 0x08},
	{0x67, 0x80},
	{0x68, 0x80},
	{0xdb, 0x00},
	{0x34, 0xc7},
	{0xfd, 0x02},
	{0x14, 0x00},
	{0xfd, 0x00},
	ENDMARKER,
};

/*复古效果*/
static struct regval_list module_effect_antique_regs[] =
{    
	{0xfd, 0x01},
	{0x66, 0x10},
	{0x67, 0x98},
	{0x68, 0x58},
	{0xdb, 0x00},
	{0x34, 0xc7},
	{0xfd, 0x02},
	{0x14, 0x00},
	{0xfd, 0x00},
	ENDMARKER,
};
#endif
static struct regval_list module_scene_auto_regs[] =
{
	{0xfd, 0x01},
	{0xcd, 0x08},
	{0xce, 0x18},
	{0xcf, 0x30},
	{0xd0, 0x45},
	//24M 50HZ 2.5PLL 8-11.2fps uxga
	{0xfd, 0x00},
	{0x03, 0x03},
	{0x04, 0x42},
	{0x05, 0x00},
	{0x06, 0x00},
	{0x07, 0x00},
	{0x08, 0x00},
	{0x09, 0x00},
	{0x0a, 0x9d},
	{0xfd, 0x01},
	{0xf0, 0x00},
	{0xf7, 0x8b},
	{0xf8, 0x74},
	{0x02, 0x0c},
	{0x03, 0x01},
	{0x06, 0x8b},
	{0x07, 0x00},
	{0x08, 0x01},
	{0x09, 0x00},
	{0xfd, 0x02},
	{0x3d, 0x0f},
	{0x3e, 0x74},
	{0x3f, 0x00},
	{0x88, 0xae},
	{0x89, 0x69},
	{0x8a, 0x43},
	{0xfd, 0x02},
	{0xbe, 0x84},
	{0xbf, 0x06},
	{0xd0, 0x84},
	{0xd1, 0x06},
	{0xc9, 0x84},
	{0xca, 0x06},
	{0xfd, 0x00},
	ENDMARKER,
};
#if 0
static struct regval_list module_scene_night_regs[] =
{
	{0xfd, 0x01},
	{0xcd, 0x20},
	{0xce, 0x1f},
	{0xcf, 0x40},
	{0xd0, 0x60},
//24M 50HZ 2.5PLL 6-10fps uxga
	{0xfd, 0x00},
	{0x03, 0x02},
	{0x04, 0xe8},
	{0x05, 0x00},
	{0x06, 0x00},
	{0x07, 0x00},
	{0x08, 0x00},
	{0x09, 0x01},
	{0x0a, 0x20},
	{0xfd, 0x01},
	{0xf0, 0x00},
	{0xf7, 0x7c},
	{0xf8, 0x67},
	{0x02, 0x10},
	{0x03, 0x01},
	{0x06, 0x7c},
	{0x07, 0x00},
	{0x08, 0x01},
	{0x09, 0x00},
	{0xfd, 0x02},
	{0x3d, 0x14},
	{0x3e, 0x67},
	{0x3f, 0x00},
	{0x88, 0x21},
	{0x89, 0xf8},
	{0x8a, 0x44},
	{0xfd, 0x02},
	{0xbe, 0xc0},
	{0xbf, 0x07},
	{0xd0, 0xc0},
	{0xd1, 0x07},
	{0xc9, 0xc0},
	{0xca, 0x07},
	{0xfd, 0x00},
	ENDMARKER,
};

static  struct regval_list module_scene_portrait[] =
{
//  NULL
ENDMARKER,
};

/*
 * The exposure target setttings
 */
static struct regval_list module_exp_comp_neg4_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0xc0},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_neg3_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0xd0},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_neg2_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0xe0},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_neg1_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0xf0},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_zero_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0x00},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_pos1_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0x10},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_pos2_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0x20},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_pos3_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0x30},
	{0xfd,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_pos4_regs[] = {
//  NULL
	{0xfd,0x01},
	{0xdb,0x40},
	{0xfd,0x00},
	ENDMARKER,
};
#endif
static struct v4l2_ctl_cmd_info v4l2_ctl_array[] =
{
	{	.id   = V4L2_CID_AUTO_WHITE_BALANCE, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 1,},
	{	.id   = V4L2_CID_WHITE_BALANCE_TEMPERATURE, 
		.min  = 0, 
		.max  = 3, 
		.step = 1, 
		.def  = 1,},
	{	.id = V4L2_CID_GAIN, 
		.min = 10, 
		.max = 2048, 
		.step = 1, 
		.def = 30,},
	{	.id   = V4L2_CID_FLASH_STROBE, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 0,},
	{	.id   = V4L2_CID_FLASH_STROBE_STOP, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 0,},
#if 0
	{	.id   = V4L2_CID_SCENE_EXPOSURE, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 0,},//3.4内核没有定义此命令字
	{	.id   = V4L2_CID_PRIVATE_PREV_CAPT, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = PREVIEW_MODE,},//3.4内核没有定义此命令字

	{	.id   = V4L2_CID_GAIN, 
		.min  = 0,
		.max  = 0,
		.step = 0,
		.def  = 0,},
	{   .id   = V4L2_CID_EXPOSURE, 
		.min  = 0, 
		.max  = 0,
		.step = 0, 
		.def  = 0,},
	{	.id   = V4L2_CID_EXPOSURE_COMP, 
		.min  = -4, 
		.max  = 4, 
		.step = 1, 
		.def  = 0,},
    {	.id   = V4L2_CID_AF_MODE,
		.min  = NONE_AF, 
		.max  = CONTINUE_AF|SINGLE_AF, 
		.step = 1, 
		.def  = CONTINUE_AF|SINGLE_AF,},
	{	.id   = V4L2_CID_AF_STATUS, 
		.min  = AF_STATUS_DISABLE, 
		.max  = AF_STATUS_FAIL, 
		.step = 1, 
		.def  = AF_STATUS_DISABLE,},
#endif
		{	.id = V4L2_CID_MIRRORFLIP, //3.4内核没有定义此命令字,同时写入vflip和hflip
		.min = NONE, 
		.max = HFLIP|VFLIP, 
		.step = 1, 
		.def = NONE,},
};

static struct v4l2_ctl_cmd_info_menu v4l2_ctl_array_menu[] =
{
	{	.id   = V4L2_CID_COLORFX, 
		.max  = 3, 
		.mask = 0x0, 
		.def  = 0,},
	{	.id   = V4L2_CID_EXPOSURE_AUTO, 
		.max  = 1, 
		.mask = 0x0, 
		.def  = 1,},
	{  
	   .id = V4L2_CID_SCENE_MODE, 
	   .max = V4L2_SCENE_MODE_TEXT, 
	   .mask = 0x0, 
	   .def = 0,
	},
	{ .id = V4L2_CID_POWER_LINE_FREQUENCY, 
	.max = V4L2_CID_POWER_LINE_FREQUENCY_AUTO, 
	.mask = 0x0,
	.def = V4L2_CID_POWER_LINE_FREQUENCY_AUTO,},
#if 1
	{	.id   = V4L2_CID_FLASH_LED_MODE, 
		.max  = 3,
		.mask = 0x0,
		.def  = 0,},
#endif
};


#endif /* __MODULE_DIFF_H__ */
