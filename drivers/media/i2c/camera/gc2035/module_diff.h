/*
 * module different macro
 *
 * Copyright (C) 2008 Renesas Solutions Corp.
 * Kuninori Morimoto <morimoto.kuninori@renesas.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __MODULE_DIFF_H__
#define __MODULE_DIFF_H__

#include "./../module_comm/module_comm.h"

#define CAMERA_MODULE_NAME 		"gc2035"
#define CAMERA_MODULE_PID			0x2035
#define VERSION(pid, ver) 		((pid<<8)|(ver&0xFF))
#define GC2035_SUBSAMPLE

#define MODULE_PLATFORM_ID		GC2035_PLATFORM_ID
#define MODULE_I2C_REAL_ADDRESS		(0x78>>1)
#define MODULE_I2C_REG_ADDRESS		(0x78>>1)
#define I2C_REGS_WIDTH			1
#define I2C_DATA_WIDTH			1

#define PIDH					0xf0 /* Product ID Number H byte */
#define PIDL					0xf1 /* Product ID Number L byte */
#define OUTTO_SENSO_CLOCK 		24000000

#define DEFAULT_VSYNC_ACTIVE_LEVEL		V4L2_MBUS_VSYNC_ACTIVE_HIGH
#define DEFAULT_HSYNC_ACTIVE_LEVEL		V4L2_MBUS_HSYNC_ACTIVE_HIGH
#define DEFAULT_PCLK_SAMPLE_EDGE        V4L2_MBUS_PCLK_SAMPLE_RISING
#define DEFAULT_POWER_LINE_FREQUENCY	V4L2_CID_POWER_LINE_FREQUENCY_50HZ

#define MODULE_DEFAULT_WIDTH	WIDTH_SVGA
#define MODULE_DEFAULT_HEIGHT	HEIGHT_SVGA
#define MODULE_MAX_WIDTH		WIDTH_UXGA
#define MODULE_MAX_HEIGHT		HEIGHT_UXGA

#define AHEAD_LINE_NUM			15    //10ÐÐ = 50´ÎÑ­»·
#define DROP_NUM_CAPTURE		2
#define DROP_NUM_PREVIEW		6

static unsigned int frame_rate_svga[] = {30,};
//static unsigned int frame_rate_720p[] = {30,};
static unsigned int frame_rate_uxga[] = {15,};

/*
 * register setting for window size 800*600
 */
static const struct regval_list module_init_regs[] =
{
	{0xfe , 0x80},
	{0xfe , 0x80}, 
	{0xfe , 0x80}, 
	{0xfc , 0x06},
	{0xf2 , 0x00}, 
	{0xf3 , 0x00}, 
	{0xf4 , 0x00}, 
	{0xf5 , 0x00}, 
	{0xf9 , 0xfe}, //[0] pll enable
	{0xfa , 0x00}, 
	{0xf6 , 0x00},
	{0xf7 , 0x15}, //pll enable 
	{0xf8 , 0x85}, 
	{0xfe , 0x00}, 
	{0x82 , 0x00}, 
	{0xb3 , 0x60}, 
	{0xb4 , 0x40},
	{0xb5 , 0x60},
	{0x03 , 0x02}, 
	{0x04 , 0x80},
		//////////measure window  ///////////
	{0xfe , 0x00}, 
	{0xec , 0x06},//04 
	{0xed , 0x06},//04 
	{0xee , 0x62},//60 
	{0xef , 0x92},//90 
		///////////analog/////////////
	{0x0a , 0x00}, //row start 
	{0x0c , 0x00}, //col start 
	{0x0d , 0x04},
	{0x0e , 0xc0}, 
	{0x0f , 0x06}, //Window setting 
	{0x10 , 0x58}, 
	{0x17 , 0x14}, //[0]mirror [1]flip 
	{0x18 , 0x0e}, //0a 2012.10.26
	{0x19 , 0x0c}, //AD pipe number 
	{0x1a , 0x01}, //CISCTL mode4 
	{0x1b , 0x8b}, 
	{0x1c , 0x05},//add by lanking 20130403
	{0x1e , 0x88}, //analog mode1 [7] tx-high en [5:3]COL_bias 
	{0x1f , 0x08}, //[3] tx-low en// 
	{0x20 , 0x05}, //[0]adclk mode , 0x[1]rowclk_MODE [2]rsthigh_en
	{0x21 , 0x0f}, //[6:4]rsg 
	{0x22 , 0xf0}, //[3:0]vref  d0 20130628
	{0x23 , 0xc3}, //f3//ADC_r {0x24 , 0x17}, //pad drive  16
	//AWB_gray
	{0xfe , 0x01},
	{0x4f , 0x00},
	{0x4d , 0x32}, // 30
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4d , 0x42}, // 40
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4d , 0x52}, // 50 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4d , 0x62}, // 60 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4d , 0x72}, // 70 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4d , 0x82}, // 80 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4d , 0x92}, // 90 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04}, 
	{0x4f , 0x01}, 
	{0x50 , 0x88}, 
	{0xfe , 0x00}, 
	{0x82 , 0xfe},
		///////awb start ////////////////
	{0xfe , 0x01}, 
	{0x50 , 0x88},//c0//[6]green mode 
	{0x52 , 0x40}, 
	{0x54 , 0x60}, 
	{0x56 , 0x06}, 
	{0x57 , 0x20},//pre adjust 
	{0x58 , 0x01}, 
	{0x5b , 0x02},//AWB_gain_delta
	{0x61 , 0xaa},//R/G stand 
	{0x62 , 0xaa},//R/G stand 
	{0x71 , 0x00}, 
	{0x74 , 0x10},//AWB_C_max 
	{0x77 , 0x08},//AWB_p2_x 
	{0x78 , 0xfd},//AWB_p2_y 
	{0x86 , 0x30}, 
	{0x87 , 0x00}, 
	{0x88 , 0x04},//[1]dark mode 
	{0x8a , 0xc0},//awb move mode 
	{0x89 , 0x75}, 
	{0x84 , 0x08},//auto_window 
	{0x8b , 0x00},//awb compare luma 
	{0x8d , 0x70},//awb gain limit R
	{0x8e , 0x70},//G 
	{0x8f , 0xf4},//B
	  /////////awb end /////////////
		//AEC
	{0xfe , 0x01},
	{0x11 , 0x20},//AEC_out_slope , 0x 
	{0x1f , 0xb0},//max_post_gain 
	{0x20 , 0x50},//max_pre_gain 
	{0x47 , 0x30},//AEC_outdoor_th 
	{0x0b , 0x10},//
	{0x13 , 0x80},//y_target
	{0xfe , 0x00}, 
	{0x05 , 0x01},
	{0x06 , 0x0d},
	{0x07 , 0x00},
	{0x08 , 0x40}, 
	{0xfe , 0x01}, 
	{0x27 , 0x00},
	{0x28 , 0xa0}, 
	{0x29 , 0x05},//  level 0 13.75 
	{0x2a , 0x00}, 
	{0x2b , 0x06},//  level 1 13.75 
	{0x2c , 0x40},
	{0x2d , 0x06},//  level 2 10 
	{0x2e , 0x40}, 
	{0x2f , 0x08},//  level 3 7.5 
	{0x30 , 0xc0}, 
	{0xfe , 0x00},// 
	{0xb6 , 0x03},//AEC enable
	{0xfe , 0x00},
		/////////BLK//////
	{0x3f , 0x00},//prc close 
	{0x40 , 0x77},// 
	{0x42 , 0x7f}, 
	{0x43 , 0x30},
	{0x5c , 0x08}, 
	{0x5e , 0x20}, 
	{0x5f , 0x20}, 
	{0x60 , 0x20}, 
	{0x61 , 0x20}, 
	{0x62 , 0x20}, 
	{0x63 , 0x20},
	{0x64 , 0x20}, 
	{0x65 , 0x20},
		///block////////////
	{0x80 , 0xff}, 
	{0x81 , 0x26},//38 //skin_Y 8c_debug 
	{0x87 , 0x90},//[7]middle gamma
	{0x84 , 0x02},//output put foramat 
	{0x86 , 0x03},//02 //sync plority  lanking 
	{0x8b , 0xbc}, 
	{0xb0 , 0x80},//globle gain 
	{0xc0 , 0x40},//Yuv bypass
		//////lsc/////////////
	{0xfe , 0x01},
	{0xc2 , 0x38}, 
	{0xc3 , 0x25}, 
	{0xc4 , 0x21}, 
	{0xc8 , 0x19}, 
	{0xc9 , 0x12}, 
	{0xca , 0x0e}, 
	{0xbc , 0x43}, 
	{0xbd , 0x18}, 
	{0xbe , 0x1b}, 
	{0xb6 , 0x40},
	{0xb7 , 0x2e},
	{0xb8 , 0x26}, 
	{0xc5 , 0x05},
	{0xc6 , 0x03}, 
	{0xc7 , 0x04}, 
	{0xcb , 0x00}, 
	{0xcc , 0x00}, 
	{0xcd , 0x00}, 
	{0xbf , 0x14}, 
	{0xc0 , 0x22}, 
	{0xc1 , 0x1b}, 
	{0xb9 , 0x00}, 
	{0xba , 0x05}, 
	{0xbb , 0x05}, 
	{0xaa , 0x35},
	{0xab , 0x33}, 
	{0xac , 0x33}, 
	{0xad , 0x25}, 
	{0xae , 0x22}, 
	{0xaf , 0x27}, 
	{0xb0 , 0x1d}, 
	{0xb1 , 0x20}, 
	{0xb2 , 0x22}, 
	{0xb3 , 0x14}, 
	{0xb4 , 0x15}, 
	{0xb5 , 0x16}, 
	{0xd0 , 0x00}, 
	{0xd2 , 0x07}, 
	{0xd3 , 0x08}, 
	{0xd8 , 0x00}, 
	{0xda , 0x13}, 
	{0xdb , 0x17}, 
	{0xdc , 0x00}, 
	{0xde , 0x0a}, 
	{0xdf , 0x08}, 
	{0xd4 , 0x00}, 
	{0xd6 , 0x00}, 
	{0xd7 , 0x0c}, 
	{0xa4 , 0x00}, 
	{0xa5 , 0x00}, 
	{0xa6 , 0x00}, 
	{0xa7 , 0x00}, 
	{0xa8 , 0x00}, 
	{0xa9 , 0x00}, 
	{0xa1 , 0x80}, 
	{0xa2 , 0x80},
		//////////cc//////////////
	{0xfe , 0x02}, 
	{0xc0 , 0x01},
	{0xc1 , 0x40},//Green_cc for d 
	{0xc2 , 0xfc}, 
	{0xc3 , 0x05}, 
	{0xc4 , 0xec}, 
	{0xc5 , 0x42}, 
	{0xc6 , 0xf8}, 
	{0xc7 , 0x40},//for cwf
	{0xc8 , 0xf8}, 
	{0xc9 , 0x06},
	{0xca , 0xfd}, 
	{0xcb , 0x3e}, 
	{0xcc , 0xf3}, 
	{0xcd , 0x36},//for A 
	{0xce , 0xf6}, 
	{0xcf , 0x04}, 
	{0xe3 , 0x0c}, 
	{0xe4 , 0x44}, 
	{0xe5 , 0xe5}, 
	{0xfe , 0x00},
		///==========asde
	{0xfe , 0x01},
	{0x21 , 0xbf}, 
	{0xfe , 0x02}, 
	{0xa4 , 0x00},
	{0xa5 , 0x40},//lsc_th 
	{0xa2 , 0xa0},//lsc_dec_slope
	///////20140505 update for DD///
	{0x86 , 0x27},//add for DPC travis 20140505 
	{0x8a , 0x33},//add for DPC travis 20140505 
	{0x8d , 0x85},//add for DPC travis 20140505 
	{0xa6 , 0xf0},//80//change for DPC travis 20140505 //
	{0xa6 , 0x80},//dd_th
	{0xa7 , 0x80},//ot_th
	{0xab , 0x31}, 
	{0xa9 , 0x6f}, 
	{0xb0 , 0x99},//edge effect slope low
	{0xb1 , 0x34},//edge effect slope low
	{0xb3 , 0x80},//saturation dec slope 
	{0xde , 0xb6}, 
	{0x38 , 0x0f}, 
	{0x39 , 0x60}, 
	{0xfe , 0x00}, 
	{0x81 , 0x26}, 
	{0xfe , 0x02}, 
	{0x83 , 0x00}, 
	{0x84 , 0x45}, ////////////YCP//////////
	{0xd1 , 0x38},//saturation_cb 
	{0xd2 , 0x38},//saturation_Cr 
	{0xd3 , 0x40},//contrast 
	{0xd4 , 0x80},//contrast center 
	{0xd5 , 0x00},//luma_offset 
	{0xdc , 0x30}, 
	{0xdd , 0xb8},//edge_sa_g,b 
	{0xfe , 0x00}, //////////dndd///////////
	{0xfe , 0x02},
	{0x88 , 0x1f},//dn_b_base 
	{0x8c , 0xf6},//[2]b_in_dark_inc
	{0x89 , 0x03},//dn_c_weight //////////EE ///////////
	{0xfe , 0x02}, 
	{0x90 , 0x6c},// EEINTP mode1 
	{0x97 , 0x23},// edge effect 
	////==============RGB Gamma ////
	{0xfe , 0x02},
	{0x15 , 0x0a}, 
	{0x16 , 0x12}, 
	{0x17 , 0x19},
	{0x18 , 0x1f}, 
	{0x19 , 0x2c}, 
	{0x1a , 0x38}, 
	{0x1b , 0x42}, 
	{0x1c , 0x4e}, 
	{0x1d , 0x63}, 
	{0x1e , 0x76},
	{0x1f , 0x87},
	{0x20 , 0x96}, 
	{0x21 , 0xa2}, 
	{0x22 , 0xb8}, 
	{0x23 , 0xca}, 
	{0x24 , 0xd8}, 
	{0x25 , 0xe3}, 
	{0x26 , 0xf0}, 
	{0x27 , 0xf8}, 
	{0x28 , 0xfd}, 
	{0x29 , 0xff}, 
//// small  RGB gamma////
	/* 
	{0xfe , 0x02},
	{0x15 , 0x0b},
	{0x16 , 0x0e},
	{0x17 , 0x10}, 
	{0x18 , 0x12}, 
	{0x19 , 0x19}, 
	{0x1a , 0x21}, 
	{0x1b , 0x29},
	{0x1c , 0x31}, 
	{0x1d , 0x41},
	{0x1e , 0x50},
	{0x1f , 0x5f},
	{0x20 , 0x6d}, 
	{0x21 , 0x79},
	{0x22 , 0x91},
	{0x23 , 0xa5}, 
	{0x24 , 0xb9}, 
	{0x25 , 0xc9}, 
	{0x26 , 0xe1}, 
	{0x27 , 0xee}, 
	{0x28 , 0xf7}, 
	{0x29 , 0xff},
	*/
	///=================y gamma
	{0xfe , 0x02}, 
	{0x2b , 0x00},
	{0x2c , 0x04},
	{0x2d , 0x09}, 
	{0x2e , 0x18}, 
	{0x2f , 0x27}, 
	{0x30 , 0x37}, 
	{0x31 , 0x49}, 
	{0x32 , 0x5c}, 
	{0x33 , 0x7e}, 
	{0x34 , 0xa0}, 
	{0x35 , 0xc0}, 
	{0x36 , 0xe0}, 
	{0x37 , 0xff},
	//	Sleep(250},
		//AWB clear
	{0xfe , 0x01}, 
	{0x4f , 0x00}, 
	{0x4d , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4d , 0x10}, // 10 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4d , 0x20}, // 20
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4d , 0x30}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, // 30 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4d , 0x40}, // 40 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4d , 0x50}, // 50 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4d , 0x60}, // 60 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4d , 0x70}, // 70 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4d , 0x80}, // 80 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4d , 0x90}, // 90 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4d , 0xa0}, // a0 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4d , 0xb0}, // b0 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4d , 0xc0}, // c0 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4d , 0xd0}, // d0 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4e , 0x00},
	{0x4e , 0x00}, 
	{0x4e , 0x00}, 
	{0x4f , 0x01}, 
	/////// awb value////////
	{0xfe , 0x01}, 
	{0x4f , 0x00},
	{0x4d , 0x30}, 
	{0x4e , 0x00},
	{0x4e , 0x80}, 
	{0x4e , 0x80}, 
	{0x4e , 0x02}, 
	{0x4e , 0x02}, 
	{0x4d , 0x40}, 
	{0x4e , 0x00}, 
	{0x4e , 0x80},
	{0x4e , 0x80}, 
	{0x4e , 0x02}, 
	{0x4e , 0x02}, 
	{0x4e , 0x02}, 
	{0x4d , 0x53}, 
	{0x4e , 0x08},
	{0x4e , 0x04}, 
	{0x4d , 0x62}, 
	{0x4e , 0x10}, 
	{0x4d , 0x72}, 
	{0x4e , 0x20}, 
	{0x4f , 0x01},
	/////1600x1200size// 
	{0xfe , 0x00},// 
	{0x90 , 0x01}, ////crop enable 
	{0x95 , 0x04},  ////1600x1200
	{0x96 , 0xb0}, 
	{0x97 , 0x06}, 
	{0x98 , 0x40},
	{0xfe , 0x03}, 
	{0x17 , 0x00}, //widv 
	{0x40 , 0x40},  //00 
	{0x41 , 0x02}, // Pclk_polarity 
	{0x42 , 0x40}, 
	{0x43 , 0x06}, //output buf width
#if defined(GC2035_SUBSAMPLE)
	    ////////sabsumple  800X600//////
	{0xfe , 0x01}, 
	{0x21 , 0xbf},
	{0xfe , 0x00}, 
	{0xfa , 0x00}, 
	{0xc8 , 0x00},
	{0x99 , 0x22}, 
	{0x9a , 0x07}, 
	{0x9b , 0x00}, 
	{0x9c , 0x00}, 
	{0x9d , 0x00}, 
	{0x9e , 0x00},
	{0x9f , 0x00}, 
	{0xa0 , 0x00},
	{0xa1 , 0x00}, 
	{0xa2 , 0x00},
	{0x90 , 0x01}, 
	{0x95 , 0x02}, 
	{0x96 , 0x58}, 
	{0x97 , 0x03}, 
	{0x98 , 0x20},	 
#else 
	{0xfe , 0x01}, 
	{0x21 , 0xbf},
		////////scalar  800X600/////////
	{0xfe , 0x00}, 
	{0xfa , 0x00}, 
	{0xc8 , 0x54},
	{0x90 , 0x01}, 
	{0x95 , 0x02}, 
	{0x96 , 0x58}, 
	{0x97 , 0x03}, 
	{0x98 , 0x20},
#endif
	  #if 0 /////////  re zao///
	{0xfe , 0x00}, 
	{0xfe , 0x01}, 
	{0x21 , 0xff}, 
	{0xfe , 0x02},
	{0x8a , 0x33},
	{0x8c , 0x76}, 
	{0x8d , 0x85}, 
	{0xa6 , 0xf0}, 
	{0xae , 0x9f}, 
	{0xa2 , 0x90}, 
	{0xa5 , 0x40}, 
	{0xa7 , 0x30}, 
	{0xb0 , 0x88}, 
	{0x38 , 0x0b}, 
	{0x39 , 0x30}, 
	{0xfe , 0x00}, 
	{0x87 , 0xb0},
	 	////dark sun/////
	{0xfe , 0x02}, 
	{0x40 , 0x06}, 
	{0x41 , 0x23}, 
	{0x42 , 0x3f}, 
	{0x43 , 0x06},
	{0x44 , 0x00}, 
	{0x45 , 0x00},
	{0x46 , 0x14}, 
	{0x47 , 0x09},
	  #endif
		////output DVP/////
	{0xfe , 0x00}, 
	{0x82 , 0xfe},
	{0xf2 , 0x70}, 
	{0xf3 , 0xff}, 
	{0xf4 , 0x00}, 
	{0xf5 , 0x30},

	ENDMARKER,
};

/* 800*600: SVGA*/
static const struct regval_list module_svga_regs[] = {
  	#if defined(GC2035_SUBSAMPLE)
	{0xfe , 0x01},	
	{0x21 , 0xbf},
	    ////////sabsumple  800X600//////
	{0xfe , 0x00},
	{0xf8 , 0x85}, 
	{0xfa , 0x00},
	{0xc8 , 0x00},
	                                  
	{0x99 , 0x22},
	{0x9a , 0x07},
	{0x9b , 0x00},  
	{0x9c , 0x00},
	{0x9d , 0x00},
	{0x9e , 0x00},
	{0x9f , 0x00},  
	{0xa0 , 0x00},
	{0xa1 , 0x00},
	{0xa2 , 0x00},
		                                
	{0x90 , 0x01},
	{0x95 , 0x02},
	{0x96 , 0x58},  
	{0x97 , 0x03},
	{0x98 , 0x20},	 

#else
	{0xfe , 0x01},	
	{0x21 , 0xbf},
		////////scalar  800X600/////////
	{0xfe , 0x00},
		{0xf8 , 0x85}, 
	{0xfa , 0x00},
	{0xc8 , 0x54},
	                                                                                
	{0x90 , 0x01},
	{0x95 , 0x02},
	{0x96 , 0x58},  
	{0x97 , 0x03},
	{0x98 , 0x20},

#endif

	ENDMARKER,
};
#if 0
/* 1280*720: 720P*/
static const struct regval_list module_720p_regs[] = {
	////////subsumple  1280X720//////
	   {0xfe,0x00},
	   	{0xf8 , 0x84}, 
	   {0xfa,0x00},
	   {0xc8,0x00},
	   
	   {0x99,0x55},// 4/5 subsample
	   {0x9a,0x06},
	   {0x9b,0x00},
	   {0x9c,0x00},
	   {0x9d,0x01},
	   {0x9e,0x23},
	   {0x9f,0x00},
	   {0xa0,0x00},
	   {0xa1,0x01},
	   {0xa2,0x23},
	   
	   {0x90,0x01},
	   {0x95,0x02},
	   {0x96,0xd0},  
	   {0x97,0x05},
	   {0x98,0x00},
	   ENDMARKER,

};
#endif
/* 1600*1200 UXGA */
static const struct regval_list module_uxga_regs[] = {
#if defined(GC2035_SUBSAMPLE)
	{0xfe , 0x01},	
	{0x21 , 0xdf},
	  	////////sabsumple  1600X1200//////
	{0xfe , 0x00},
		{0xf8 , 0x85}, 
	{0xfa , 0x11},
	{0xc8 , 0x00},
	                                  
	{0x99 , 0x11},
	{0x9a , 0x06},
	{0x9b , 0x00},  
	{0x9c , 0x00},
	{0x9d , 0x00},
	{0x9e , 0x00},
	{0x9f , 0x00},  
	{0xa0 , 0x00},
	{0xa1 , 0x00},
	{0xa2 , 0x00},
	                                  
		                                
	{0x90 , 0x01},
	{0x95 , 0x04},
	{0x96 , 0xb0},  
	{0x97 , 0x06},
	{0x98 , 0x40},	 

#else
	{0xfe , 0x01},	
	{0x21 , 0xdf},
		////////scalar  1600X1200/////////
	{0xfe , 0x00},
		{0xf8 , 0x85}, 
	{0xfa , 0x11},
	{0xc8 , 0x00},
		                                
	{0x90 , 0x01},
	{0x95 , 0x04},
	{0x96 , 0xb0},  
	{0x97 , 0x06},
	{0x98 , 0x40},
	             

#endif
  ENDMARKER,
};

static const struct regval_list module_init_auto_focus[] = {
    //  NULL
	ENDMARKER,
};
/*
 * window size list
 */

#if 0
/* 640X480 */
static struct camera_module_win_size module_win_vga = {
    .name             = "VGA",
    .width            = WIDTH_VGA,
    .height           = HEIGHT_VGA,
    .win_regs         = module_vga_regs,
    .frame_rate_array = frame_rate_vga,
};
#endif
/* 800X600 */
static struct camera_module_win_size module_win_svga = {
    .name             = "SVGA",
    .width            = WIDTH_SVGA,
    .height           = HEIGHT_SVGA,
    .win_regs         = module_svga_regs,

    .frame_rate_array = frame_rate_svga,
    .capture_only     = 0,
};
#if 0
/* 1280X720 */
static struct camera_module_win_size module_win_720p = {
    .name             = "720P",
    .width            = WIDTH_720P,
    .height           = HEIGHT_720P,
    .win_regs         = module_720p_regs,
    .frame_rate_array = frame_rate_720p,
};
#endif
/* 1600X1200 */
static struct camera_module_win_size module_win_uxga = {
    .name             = "UXGA",
    .width            = WIDTH_UXGA,
    .height           = HEIGHT_UXGA,
    .win_regs         = module_uxga_regs,
    .frame_rate_array = frame_rate_uxga,
    .capture_only     = 1,
};

static struct camera_module_win_size *module_win_list[] = {
   // &module_win_vga,
    &module_win_svga,
  //  &module_win_720p,
    &module_win_uxga,
};

static struct regval_list module_whitebance_auto_regs[]=
{
//  NULL
	{0xfe, 0x00},
    {0xb3, 0x61},
    {0xb4, 0x40},
    {0xb5, 0x61},
    ENDMARKER,
};

/* Cloudy Colour Temperature : 6500K - 8000K  */
static struct regval_list module_whitebance_cloudy_regs[]=
{
//  NULL
	{0xfe, 0x00},
    {0xb3, 0x88},
    {0xb4, 0x44},
    {0xb5, 0x40},
    ENDMARKER,
};

/* ClearDay Colour Temperature : 5000K - 6500K  */
static struct regval_list module_whitebance_sunny_regs[]=
{
//  NULL
	{0xfe, 0x00},
    {0xb3, 0x94},
    {0xb4, 0x58},
    {0xb5, 0x68},
    ENDMARKER,
};

/* Office Colour Temperature : 3500K - 5000K ,Ó«¹âµÆ */
static struct regval_list module_whitebance_fluorescent_regs[]=
{
//  NULL
	
    {0xfe, 0x00},
    {0xb3, 0x58},
    {0xb4, 0x40},
    {0xb5, 0x90},
    ENDMARKER,
};

/* Home Colour Temperature : 2500K - 3500K £¬°×³ãµÆ */
static struct regval_list module_whitebance_incandescent_regs[]=
{
//  NULL
	{0xfe, 0x00},
    {0xb3, 0x40},
    {0xb4, 0x40},
    {0xb5, 0xf0},       //0x50
    ENDMARKER,
};
#if 0
/*Õý³£Ä£Ê½*/
static struct regval_list module_effect_normal_regs[] =
{
//  NULL
	{0xfe, 0x00},
    {0x83, 0x00},
    ENDMARKER,
};

/*µ¥É«£¬ºÚ°×ÕÕÆ¬*/
static struct regval_list module_effect_white_black_regs[] =
{
    {0xfe, 0x00},
    {0x83, 0x12},
	ENDMARKER,
};

/*¸ºÆ¬Ð§¹û*/
static struct regval_list module_effect_negative_regs[] =
{
    //Negative
    {0xfe, 0x00},
    {0x83, 0x01},
	ENDMARKER,
};
/*¸´¹ÅÐ§¹û*/
static struct regval_list module_effect_antique_regs[] =
{    
    {0xfe, 0x00},
    {0x83, 0x82},
	ENDMARKER,
};
#endif
static struct regval_list module_scene_auto_regs[] =
{
//  NULL
	{0xfe, 0x01},
    {0x3e, 0x40},
    {0xfe, 0x00},
	ENDMARKER,
};
/*
 * The exposure target setttings
 */
static struct regval_list module_exp_comp_neg4_regs[] = {
	{0xfe,0x01},
	{0x13,0x40},
	{0xfe,0x02},
	{0xd5,0xc0},
	{0xfe,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_neg3_regs[] = {
	{0xfe,0x01},
	{0x13,0x50},
	{0xfe,0x02},
	{0xd5,0xd0},
	{0xfe,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_neg2_regs[] = {
	{0xfe,0x01},
	{0x13,0x60},
	{0xfe,0x02},
	{0xd5,0xe0},
	{0xfe,0x00},

	ENDMARKER,
};

static struct regval_list module_exp_comp_neg1_regs[] = {
	{0xfe,0x01},
	{0x13,0x68},
	{0xfe,0x02},
	{0xd5,0xf0},
	{0xfe,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_zero_regs[] = {
	 {0xfe,0x01},
	{0x13,0x78},
     {0xfe,0x02},
	{0xd5,0x00},
	{0xfe,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_pos1_regs[] = {
	{0xfe,0x01},
	{0x13,0x80},
	{0xfe,0x02},
	{0xd5,0x10},
	{0xfe,0x00},
	ENDMARKER,
};

static struct regval_list module_exp_comp_pos2_regs[] = {
	{0xfe,0x01},
	{0x13,0x90},
	{0xfe,0x02},
	{0xd5,0x20},
	{0xfe,0x00},
	{0xff,0xff},
	ENDMARKER,
};

static struct regval_list module_exp_comp_pos3_regs[] = {
    {0xfe,0x01},
	{0x13,0xa0},
	{0xfe,0x02},
	{0xd5,0x30},
	{0xfe,0x00},

	ENDMARKER,
};

static struct regval_list module_exp_comp_pos4_regs[] = {
	{0xfe,0x01},
	{0x13,0xb0},
	{0xfe,0x02},
	{0xd5,0x50},
	{0xfe,0x00},
	ENDMARKER,
};

static struct v4l2_ctl_cmd_info v4l2_ctl_array[] =
{
	{
			.id = V4L2_CID_AUTO_WHITE_BALANCE,
			.min = 0,
			.max = 1,
			.step = 1,
			.def = 1,
		},
		{	.id = V4L2_CID_EXPOSURE_COMP, 
			.min = -4, 
			.max = 4, 
			.step = 1, 
			.def = 0,
		},	
		{	.id = V4L2_CID_GAIN, 
			.min = 10, 
			.max = 2048, 
			.step = 1, 
			.def = 30,
		},
    {	.id = V4L2_CID_WHITE_BALANCE_TEMPERATURE, 
        .min = 0, 
        .max = 3, 
        .step = 1, 
        .def = 1,},
     	{	.id   = V4L2_CID_FLASH_STROBE, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 0,
	},
	
	{	.id   = V4L2_CID_FLASH_STROBE_STOP, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 0,
	},
//    {	.id = V4L2_CID_SCENE_EXPOSURE, 
//        .min = 0, 
//        .max = 1, 
//        .step = 1, 
//        .def = 0,},//3.4ÄÚºËÃ»ÓÐ¶¨Òå´ËÃüÁî×Ö
//    {	.id = V4L2_CID_PRIVATE_PREV_CAPT, 
//        .min = 0, 
//        .max = 1, 
//        .step = 1, 
//        .def = PREVIEW_MODE,},//3.4ÄÚºËÃ»ÓÐ¶¨Òå´ËÃüÁî×Ö
#if 0
    {	.id = V4L2_CID_AF_STATUS, 
        .min = AF_STATUS_DISABLE, 
        .max = AF_STATUS_FAIL, 
        .step = 1, 
        .def = AF_STATUS_DISABLE,},
    {	.id = V4L2_CID_FLASH_STROBE, 
        .min = 0, 
        .max = 1, 
        .step = 1, 
        .def = 0,},
    {	.id = V4L2_CID_FLASH_STROBE_STOP, 
        .min = 0, 
        .max = 1, 
        .step = 1, 
        .def = 0,},
#endif
	{	.id = V4L2_CID_MIRRORFLIP, //3.10ÄÚºËÃ»ÓÐ¶¨Òå´ËÃüÁî×Ö,Í¬Ê±Ð´ÈëvflipºÍhflip
		.min = NONE, 
		.max = HFLIP|VFLIP, 
		.step = 1, 
		.def = NONE,},
};

static struct v4l2_ctl_cmd_info_menu v4l2_ctl_array_menu[] =
{
    {	.id = V4L2_CID_COLORFX, 
        .max = 3, 
        .mask = 0x0, 
        .def = 0,},
    {	.id = V4L2_CID_EXPOSURE_AUTO, 
        .max = 1, 
        .mask = 0x0, 
        .def = 1,},
    {	
	    .id = V4L2_CID_SCENE_MODE, 
	    .max = V4L2_SCENE_MODE_TEXT, 
	    .mask = 0x0, 
	    .def = 0,},
#if 1
    {	.id = V4L2_CID_FLASH_LED_MODE, 
        .max = 3,
        .mask = 0x0,
        .def = 0,},
#endif
		{
		.id = V4L2_CID_POWER_LINE_FREQUENCY, 
		.max = V4L2_CID_POWER_LINE_FREQUENCY_AUTO, 
		.mask = 0x0,
		.def = V4L2_CID_POWER_LINE_FREQUENCY_AUTO,},
};

#endif /* __MODULE_DIFF_H__ */
