/*
 * module different macro
 *
 * Copyright (C) 2008 Renesas Solutions Corp.
 * Kuninori Morimoto <morimoto.kuninori@renesas.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __MODULE_DIFF_H__
#define __MODULE_DIFF_H__

#include "./../module_comm/module_comm.h"

#define CAMERA_MODULE_NAME 	"gc0328"
#define CAMERA_MODULE_PID		0x9d

#define MODULE_PLATFORM_ID		GC0328_PLATFORM_ID
#define MODULE_I2C_REAL_ADDRESS		(0x42>>1)
#define MODULE_I2C_REG_ADDRESS		(0x42>>1)
#define I2C_REGS_WIDTH			1
#define I2C_DATA_WIDTH			1

#define PID						0xf0 /* Product ID Number H byte */

#define OUTTO_SENSO_CLOCK 		24000000

#define DEFAULT_VSYNC_ACTIVE_LEVEL		V4L2_MBUS_VSYNC_ACTIVE_LOW
 #define DEFAULT_PCLK_SAMPLE_EDGE      V4L2_MBUS_PCLK_SAMPLE_RISING
#define DEFAULT_POWER_LINE_FREQUENCY	V4L2_CID_POWER_LINE_FREQUENCY_50HZ

#define MODULE_DEFAULT_WIDTH	WIDTH_VGA
#define MODULE_DEFAULT_HEIGHT	HEIGHT_VGA
#define MODULE_MAX_WIDTH		WIDTH_VGA
#define MODULE_MAX_HEIGHT		HEIGHT_VGA

#define AHEAD_LINE_NUM			15    //10ÐÐ = 50´ÎÑ­»·
#define DROP_NUM_CAPTURE		4
#define DROP_NUM_PREVIEW		4

static unsigned int frame_rate_qvga[] = {30,};
static unsigned int frame_rate_vga[]  = {30,};

static const struct regval_list module_init_regs[] =
{
	// Initail Sequence Write In.
	{0xfe , 0x80},
	{0xfe , 0x80},
	{0xfc , 0x16},
	{0xfc , 0x16},
	{0xfc , 0x16},
	{0xfc , 0x16},
	{0xf1 , 0x00},
	{0xf2 , 0x00},
	{0xfe , 0x00},
	{0x4f , 0x00},
	{0x03 , 0x00},
	{0x04 , 0xc0},
	{0x42 , 0x00},
	{0x77 , 0x5a},
	{0x78 , 0x40},
	{0x79 , 0x56},

	{0xfe , 0x00},
	{0x0d , 0x01},
	{0x0e , 0xe8},
	{0x0f , 0x02},
	{0x10 , 0x88},
	{0x09 , 0x00},
	{0x0a , 0x00},
	{0x0b , 0x00},
	{0x0c , 0x00},
	{0x16 , 0x00},
	{0x17 , 0x14},//miorr
	{0x18 , 0x0e},
	{0x19 , 0x06},

	{0x1b , 0x48},
	{0x1f , 0xC8},
	{0x20 , 0x01},
	{0x21 , 0x78},
	{0x22 , 0xb0},
	{0x23 , 0x04},//0x06  20140519 GC0328C
	{0x24 , 0x11}, 
	{0x26 , 0x00},
	{0x50 , 0x01}, //crop mode

	//global gain for range 
	{0x70 , 0x45},
	
	/////////////banding/////////////
	{0x05 , 0x02},//hb
	{0x06 , 0x2c},//
	{0x07 , 0x00},//vb
	{0x08 , 0xb8},//
	{0xfe , 0x01},//
	{0x29 , 0x00},//anti-flicker step [11:8]
	{0x2a , 0x60},//anti-flicker step [7:0]
	{0x2b , 0x02},//exp level 0  14.28fps
	{0x2c , 0xa0},//             
	{0x2d , 0x03},//exp level 1  12.50fps
	{0x2e , 0x00},//             
	{0x2f , 0x03},//exp level 2  10.00fps
	{0x30 , 0xc0},//             
	{0x31 , 0x05},//exp level 3  7.14fps
	{0x32 , 0x40},//
	{0xfe , 0x00},//

	///////////////AWB//////////////
	{0xfe , 0x01},
	{0x50 , 0x00},
	{0x4f , 0x00},
	{0x4c , 0x01},
	{0x4f , 0x00},
	{0x4f , 0x00},
	{0x4f , 0x00},
	{0x4f , 0x00},
	{0x4f , 0x00}, 
	{0x4d , 0x30},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4d , 0x40},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4d , 0x50},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4d , 0x60},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4d , 0x70},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},	
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04}, 
	{0x4e , 0x04},	
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4f , 0x01},
	{0x50 , 0x88},
	{0xfe , 0x00},

	//////////// BLK//////////////////////
	{0xfe , 0x00}, 
	{0x27 , 0xb7},
	{0x28 , 0x7F},
	{0x29 , 0x20},
	{0x33 , 0x20},
	{0x34 , 0x20},
	{0x35 , 0x20},
	{0x36 , 0x20},
	{0x32 , 0x08},
	{0x3b , 0x00}, 
	{0x3c , 0x00},
	{0x3d , 0x00},
	{0x3e , 0x00},
	{0x47 , 0x00},
	{0x48 , 0x00}, 

	//////////// block enable/////////////
	{0x40 , 0x7f}, 
	{0x41 , 0x26}, 
	{0x42 , 0xfb},
	{0x44 , 0x02}, //yuv
	{0x45 , 0x00},
	{0x46 , 0x02},
	{0x4f , 0x01},
	{0x4b , 0x01},
	{0x50 , 0x01}, 

	/////DN & EEINTP/////
	{0x7e , 0x0a}, 
	{0x7f , 0x03}, 
	{0x81 , 0x15}, 
	{0x82 , 0x90},
	{0x83 , 0x02},
	{0x84 , 0xe5},
	{0x90 , 0x2c}, 
	{0x92 , 0x02},
	{0x94 , 0x02},
	{0x95 , 0x35},

	////////////YCP///////////
	{0xd1 , 0x24},// 0x30 for front
	{0xd2 , 0x24},// 0x30 for front
	{0xd3 , 0x40},
	{0xdd , 0xd3},
	{0xde , 0x38},
	{0xe4 , 0x88},
	{0xe5 , 0x40}, 
	{0xd7 , 0x0e}, 

	///////////rgb gamma ////////////
	{0xfe , 0x00},
	{0xbf , 0x0e},
	{0xc0 , 0x1c},
	{0xc1 , 0x34},
	{0xc2 , 0x48},
	{0xc3 , 0x5a},
	{0xc4 , 0x6e},
	{0xc5 , 0x80},
	{0xc6 , 0x9c},
	{0xc7 , 0xb4},
	{0xc8 , 0xc7},
	{0xc9 , 0xd7},
	{0xca , 0xe3},
	{0xcb , 0xed},
	{0xcc , 0xf2},
	{0xcd , 0xf8},
	{0xce , 0xfd},
	{0xcf , 0xff},

#if 0
			case RGB_Gamma_m1:				 //smallest gamma curve
	{0xfe, 0x00},
	{0xbf, 0x06},
	{0xc0, 0x12},
	{0xc1, 0x22},
	{0xc2, 0x35},
	{0xc3, 0x4b},
	{0xc4, 0x5f},
	{0xc5, 0x72},
	{0xc6, 0x8d},
	{0xc7, 0xa4},
	{0xc8, 0xb8},
	{0xc9, 0xc8},
	{0xca, 0xd4},
	{0xcb, 0xde},
	{0xcc, 0xe6},
	{0xcd, 0xf1},
	{0xce, 0xf8},
	{0xcf, 0xfd},
				break;
			case RGB_Gamma_m2:
	{0xBF, 0x08},
	{0xc0, 0x0F},
	{0xc1, 0x21},
	{0xc2, 0x32},
	{0xc3, 0x43},
	{0xc4, 0x50},
	{0xc5, 0x5E},
	{0xc6, 0x78},
	{0xc7, 0x90},
	{0xc8, 0xA6},
	{0xc9, 0xB9},
	{0xcA, 0xC9},
	{0xcB, 0xD6},
	{0xcC, 0xE0},
	{0xcD, 0xEE},
	{0xcE, 0xF8},
	{0xcF, 0xFF},
				break;
				
			case RGB_Gamma_m3:			
	{0xBF, 0x0B},
	{0xc0, 0x16},
	{0xc1, 0x29},
	{0xc2, 0x3C},
	{0xc3, 0x4F},
	{0xc4, 0x5F},
	{0xc5, 0x6F},
	{0xc6, 0x8A},
	{0xc7, 0x9F},
	{0xc8, 0xB4},
	{0xc9, 0xC6},
	{0xcA, 0xD3},
	{0xcB, 0xDD},
	{0xcC, 0xE5},
	{0xcD, 0xF1},
	{0xcE, 0xFA},
	{0xcF, 0xFF},
				break;
				
			case RGB_Gamma_m4:
	{0xBF, 0x0E},
	{0xc0, 0x1C},
	{0xc1, 0x34},
	{0xc2, 0x48},
	{0xc3, 0x5A},
	{0xc4, 0x6B},
	{0xc5, 0x7B},
	{0xc6, 0x95},
	{0xc7, 0xAB},
	{0xc8, 0xBF},
	{0xc9, 0xCE},
	{0xcA, 0xD9},
	{0xcB, 0xE4},
	{0xcC, 0xEC},
	{0xcD, 0xF7},
	{0xcE, 0xFD},
	{0xcF, 0xFF},
				break;
				
			case RGB_Gamma_m5:
	{0xBF, 0x10},
	{0xc0, 0x20},
	{0xc1, 0x38},
	{0xc2, 0x4E},
	{0xc3, 0x63},
	{0xc4, 0x76},
	{0xc5, 0x87},
	{0xc6, 0xA2},
	{0xc7, 0xB8},
	{0xc8, 0xCA},
	{0xc9, 0xD8},
	{0xcA, 0xE3},
	{0xcB, 0xEB},
	{0xcC, 0xF0},
	{0xcD, 0xF8},
	{0xcE, 0xFD},
	{0xcF, 0xFF},
				break;
				
			case RGB_Gamma_m6:
	{0xBF, 0x14},							// largest gamma curve
	{0xc0, 0x28},
	{0xc1, 0x44},
	{0xc2, 0x5D},
	{0xc3, 0x72},
	{0xc4, 0x86},
	{0xc5, 0x95},
	{0xc6, 0xB1},
	{0xc7, 0xC6},
	{0xc8, 0xD5},
	{0xc9, 0xE1},
	{0xcA, 0xEA},
	{0xcB, 0xF1},
	{0xcC, 0xF5},
	{0xcD, 0xFB},
	{0xcE, 0xFE},
	{0xcF, 0xFF},	
				break;
			case RGB_Gamma_night:									//Gamma for night mode
	{0xBF, 0x0B},
	{0xc0, 0x16},
	{0xc1, 0x29},
	{0xc2, 0x3C},
	{0xc3, 0x4F},
	{0xc4, 0x5F},
	{0xc5, 0x6F},
	{0xc6, 0x8A},
	{0xc7, 0x9F},
	{0xc8, 0xB4},
	{0xc9, 0xC6},
	{0xcA, 0xD3},
	{0xcB, 0xDD},
	{0xcC, 0xE5},
	{0xcD, 0xF1},
	{0xcE, 0xFA},
	{0xcF, 0xFF},	
				break;
			default:
				//RGB_Gamma_m1
	{0xfe, 0x00},
	{0xbf, 0x06},
	{0xc0, 0x12},
	{0xc1, 0x22},
	{0xc2, 0x35},
	{0xc3, 0x4b},
	{0xc4, 0x5f},
	{0xc5, 0x72},
	{0xc6, 0x8d},
	{0xc7, 0xa4},
	{0xc8, 0xb8},
	{0xc9, 0xc8},
	{0xca, 0xd4},
	{0xcb, 0xde},
	{0xcc, 0xe6},
	{0xcd, 0xf1},
	{0xce, 0xf8},
	{0xcf, 0xfd},
				break;
		
#endif
		/////////////Y gamma//////////
		{0xfe , 0x00},
		{0x63 , 0x00},
		{0x64 , 0x05},
		{0x65 , 0x0b},
		{0x66 , 0x19},
		{0x67 , 0x2e},
		{0x68 , 0x40},
		{0x69 , 0x54},
		{0x6a , 0x66},
		{0x6b , 0x86},
		{0x6c , 0xa7},
	{0x6d , 0xc6},
	{0x6e , 0xe4},
	{0x6f , 0xff},
	
	//////////////ASDE/////////////
	{0xfe , 0x01},
	{0x18 , 0x02},
	{0xfe , 0x00},
	{0x97 , 0x30},
	{0x98 , 0x00},
	{0x9b , 0x60},
	{0x9c , 0x60},
	{0xa4 , 0x50},
	{0xa8 , 0x80},
	{0xaa , 0x40},
	{0xa2 , 0x23},
	{0xad , 0x28},
	
	//////////////abs///////////
	{0xfe , 0x01},
	{0x9c , 0x00}, 
	{0x9e , 0xc0}, 
	{0x9f , 0x40},	
	
	////////////// AEC////////////
	{0xfe , 0x01},
	{0x08 , 0xa0},
	{0x09 , 0xe8},
	{0x10 , 0x08},
	{0x11 , 0x21},
	{0x12 , 0x11},
	{0x13 , 0x45},
	{0x15 , 0xfc},
	{0x18 , 0x02},
	{0x21 , 0xf0},
	{0x22 , 0x60},
	{0x23 , 0x30},
	{0x25 , 0x00},
	{0x24 , 0x14},
	{0x3d , 0x80},
	{0x3e , 0x40},

	////////////////AWB///////////
	{0xfe , 0x01},
	{0x51 , 0x88},
	{0x52 , 0x12},
	{0x53 , 0x80},
	{0x54 , 0x60},
	{0x55 , 0x01},
	{0x56 , 0x02},
	{0x58 , 0x00},
	{0x5b , 0x02},
	{0x5e , 0xa4},
	{0x5f , 0x8a},
	{0x61 , 0xdc},
	{0x62 , 0xdc},
	{0x70 , 0xfc},
	{0x71 , 0x10},
	{0x72 , 0x30},
	{0x73 , 0x0b},
	{0x74 , 0x0b},
	{0x75 , 0x01},
	{0x76 , 0x00},
	{0x77 , 0x40},
	{0x78 , 0x70},
	{0x79 , 0x00},
	{0x7b , 0x00},
	{0x7c , 0x71},
	{0x7d , 0x00},
	{0x80 , 0x70},
	{0x81 , 0x58},
	{0x82 , 0x98},
	{0x83 , 0x60},
	{0x84 , 0x58},
	{0x85 , 0x50},
	{0xfe , 0x00},	
	
	////////////////LSC////////////////
	{0xfe , 0x01},
	{0xc0 , 0x10},
	{0xc1 , 0x0c},
	{0xc2 , 0x0a},
	{0xc6 , 0x0e},
	{0xc7 , 0x0b},
	{0xc8 , 0x0a},
	{0xba , 0x26},
	{0xbb , 0x1c},
	{0xbc , 0x1d},
	{0xb4 , 0x23},
	{0xb5 , 0x1c},
	{0xb6 , 0x1a},
	{0xc3 , 0x00},
	{0xc4 , 0x00},
	{0xc5 , 0x00},
	{0xc9 , 0x00},
	{0xca , 0x00},
	{0xcb , 0x00},
	{0xbd , 0x00},
	{0xbe , 0x00},
	{0xbf , 0x00},
	{0xb7 , 0x07},
	{0xb8 , 0x05},
	{0xb9 , 0x05},
	{0xa8 , 0x07},
	{0xa9 , 0x06},
	{0xaa , 0x00},
	{0xab , 0x04},
	{0xac , 0x00},
	{0xad , 0x02},
	{0xae , 0x0d},
	{0xaf , 0x05},
	{0xb0 , 0x00},
	{0xb1 , 0x07},
	{0xb2 , 0x03},
	{0xb3 , 0x00},
	{0xa4 , 0x00},
	{0xa5 , 0x00},
	{0xa6 , 0x00},
	{0xa7 , 0x00},
	{0xa1 , 0x3c},
	{0xa2 , 0x50},
	{0xfe , 0x00},
		
	///////////////CCT ///////////
	{0xb1 , 0x12},
	{0xb2 , 0xf5},
	{0xb3 , 0xfe},
	{0xb4 , 0xe0},
	{0xb5 , 0x15},
	{0xb6 , 0xc8},
	
	/*   /////skin CC for front //////
	{0xb1 , 0x00},
	{0xb2 , 0x00},
	{0xb3 , 0x00},
	{0xb4 , 0xf0},
	{0xb5 , 0x00},
	{0xb6 , 0x00},
	*/

	///////////////AWB////////////////
	{0xfe , 0x01},
	{0x50 , 0x00},
	{0xfe , 0x01}, 
	{0x4f , 0x00},
	{0x4c , 0x01},
	{0x4f , 0x00},
	{0x4f , 0x00},
	{0x4f , 0x00}, 
	{0x4d , 0x34},
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4e , 0x02},
	{0x4e , 0x02},
	{0x4d , 0x44},
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4d , 0x53},
	{0x4e , 0x00},
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4e , 0x04},
	{0x4d , 0x65},
	{0x4e , 0x04},
	{0x4d , 0x73},
	{0x4e , 0x20},
	{0x4d , 0x83},
	{0x4e , 0x20},
	{0x4f , 0x01}, 
	{0x50 , 0x88}, 
	/////////output//////// 
	{0xfe , 0x00},  
	{0xf1 , 0x07}, 
	{0xf2 , 0x01}, 
	ENDMARKER,	
};

/* 320*240: QVGA*/
static const struct regval_list module_qvga_regs[] = {
	{0xfe,0x00},
	{0x59,0x22},  
	{0x5a,0x0e},  
	{0x5b,0x00}, 
	{0x5c,0x00}, 
	{0x5d,0x00}, 
	{0x5e,0x00}, 
  {0x5f,0x00}, 
	{0x60,0x00}, 
	{0x61,0x00}, 
	{0x62,0x00}, 
	
	{0x50,0x01},//enable crop window mode
	{0x51,0x00},  
	{0x52,0x00},  
	{0x53,0x00}, 
	{0x54,0x00}, 	
	{0x55,0x00}, 
	{0x56,0xf0}, 
	{0x57,0x01}, 
	{0x58,0x40}, 
    {0xfe,0x00},
	ENDMARKER,
};

/* 640*480: VGA*/
static const struct regval_list module_vga_regs[] = {
	{0xfe,0x00},
	{0x59,0x11},  
	{0x5a,0x0e},  //0x03
	{0x5b,0x00}, 
	{0x5c,0x00}, 
	{0x5d,0x00}, 
	{0x5e,0x00}, 
	{0x5f,0x00}, 
	{0x60,0x00}, 
	{0x61,0x00}, 
	{0x62,0x00}, 

	{0x50,0x01},
	{0x51,0x00},  
	{0x52,0x00}, 
	{0x53,0x00}, 
	{0x54,0x00}, 
	{0x55,0x01}, 
	{0x56,0xe0}, 
	{0x57,0x02}, 
	{0x58,0x80}, 

	{0xfe,0x00},
	ENDMARKER,
};

static const struct regval_list module_init_auto_focus[] = {
	ENDMARKER,
//  NULL
};

/*
 * window size list
 */
/* 320X240 */
static struct camera_module_win_size module_win_qvga = {
	.name             = "QVGA",
	.width            = WIDTH_QVGA,
	.height           = HEIGHT_QVGA,
	.win_regs         = module_qvga_regs,
	.frame_rate_array = frame_rate_qvga,
	.capture_only     = 0,
};

/* 640X480 */
static struct camera_module_win_size module_win_vga = {
	.name             = "VGA",
	.width            = WIDTH_VGA,
	.height           = HEIGHT_VGA,
	.win_regs         = module_vga_regs,
	.frame_rate_array = frame_rate_vga,
	.capture_only     = 0,
};

static struct camera_module_win_size *module_win_list[] = {
	&module_win_qvga,
	&module_win_vga,
};

static struct regval_list module_whitebance_auto_regs[]=
{
    {0xfe, 0x00},
    {0x42, 0xfe},
    {0x77, 0x57},
    {0x78, 0x4d},
    {0x79, 0x45},
	ENDMARKER,
};

/* Cloudy Colour Temperature : 6500K - 8000K  */
static struct regval_list module_whitebance_cloudy_regs[]=
{
    {0xfe, 0x00},
    {0x42, 0xfd},
    {0x77, 0x5e},
    {0x78, 0x40},
    {0x79, 0x54},
	ENDMARKER,
};

/* ClearDay Colour Temperature : 5000K - 6500K  */
static struct regval_list module_whitebance_sunny_regs[]=
{
    {0xfe, 0x00},
    {0x42, 0xfd},
    {0x77, 0x4c},
    {0x78, 0x70},
    {0x79, 0x7a},
	ENDMARKER,	
};

/* Office Colour Temperature : 3500K - 5000K ,Ó«¹âµÆ */
static struct regval_list module_whitebance_fluorescent_regs[]=
{
    {0xfe, 0x00},
    {0x42, 0xfd},
    {0x77, 0x40},
    {0x78, 0x50},
    {0x79, 0xc6},
	ENDMARKER,
};

/* Home Colour Temperature : 2500K - 3500K £¬°×³ãµÆ */
static struct regval_list module_whitebance_incandescent_regs[]=
{
    {0xfe, 0x00},
    {0x42, 0x48},
    {0x77, 0x40},
    {0x78, 0x7a},
    {0x79, 0x70},
	ENDMARKER,
};
#if 0
/*Õý³£Ä£Ê½*/
static struct regval_list module_effect_normal_regs[] =
{
    {0x43, 0x00},
    {0xda, 0x00}, 
    {0xdb, 0x00},
	ENDMARKER,
};

/*µ¥É«£¬ºÚ°×ÕÕÆ¬*/
static struct regval_list module_effect_white_black_regs[] =
{
    {0x43, 0x02},
    {0xda, 0x00}, 
    {0xdb, 0x00},
	ENDMARKER,
};

/*¸ºÆ¬Ð§¹û*/
static struct regval_list module_effect_negative_regs[] =
{
    {0x43, 0x01},
    {0xda, 0x00}, 
    {0xdb, 0x00},
	ENDMARKER,
};

/*¸´¹ÅÐ§¹û*/
static struct regval_list module_effect_antique_regs[] =
{    
    {0x43, 0x02},
    {0xda, 0xd0}, 
    {0xdb, 0x28},
	ENDMARKER,	
};
#endif
static struct regval_list module_scene_auto_regs[] =
{
    {0xfe, 0x01},
    {0x33, 0x00},
	ENDMARKER,
};
#if 0
static struct regval_list module_scene_night_regs[] =
{
    {0xfe, 0x01},
    {0x33, 0x20}, 
	ENDMARKER,
};
#endif
static struct v4l2_ctl_cmd_info v4l2_ctl_array[] =
{
#if 0

    {	.id = V4L2_CID_AF_MODE,   //´ËÏîÐèÖÃÓÚÊý×éÍ·²¿
		.min = NONE_AF, 
		.max = CONTINUE_AF|SINGLE_AF, 
		.step = 1, 
		.def = CONTINUE_AF|SINGLE_AF,},
#endif
		{	.id = V4L2_CID_GAIN, 
		.min = 256,
		.max = 0XFFFF,
		.step = 1,
		.def = 0,},
	{	.id = V4L2_CID_AUTO_WHITE_BALANCE, 
		.min = 0,
		.max = 1, 
		.step = 1, 
		.def = 1,},
	{	.id = V4L2_CID_WHITE_BALANCE_TEMPERATURE, 
		.min = 0, 
		.max = 3, 
		.step = 1, 
		.def = 1,},
	{	.id   = V4L2_CID_FLASH_STROBE, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 0,
	},
	
	{	.id   = V4L2_CID_FLASH_STROBE_STOP, 
		.min  = 0, 
		.max  = 1, 
		.step = 1, 
		.def  = 0,
	},
#if 0
	{	.id = V4L2_CID_SCENE_EXPOSURE, 
		.min = 0, 
		.max = 1, 
		.step = 1, 
		.def = 0,},//3.4ÄÚºËÃ»ÓÐ¶¨Òå´ËÃüÁî×Ö
	{	.id = V4L2_CID_PRIVATE_PREV_CAPT, 
		.min = 0, 
		.max = 1, 
		.step = 1, 
		.def = PREVIEW_MODE,},//3.4ÄÚºËÃ»ÓÐ¶¨Òå´ËÃüÁî×Ö

	{	.id = V4L2_CID_AF_STATUS, 
		.min = AF_STATUS_DISABLE, 
		.max = AF_STATUS_FAIL, 
		.step = 1, 
		.def = AF_STATUS_DISABLE,},
	{	.id = V4L2_CID_FLASH_STROBE, 
		.min = 0, 
		.max = 1, 
		.step = 1, 
		.def = 0,},
	{	.id = V4L2_CID_FLASH_STROBE_STOP, 
		.min = 0, 
		.max = 1, 
		.step = 1, 
		.def = 0,},
#endif
	{	.id = V4L2_CID_MIRRORFLIP, //3.10ÄÚºËÃ»ÓÐ¶¨Òå´ËÃüÁî×Ö,Í¬Ê±Ð´ÈëvflipºÍhflip
		.min = NONE, 
		.max = HFLIP|VFLIP, 
		.step = 1, 
		.def = NONE,},
};

static struct v4l2_ctl_cmd_info_menu v4l2_ctl_array_menu[] =
{
	{	.id = V4L2_CID_COLORFX, 
		.max = 3, 
		.mask = 0x0, 
		.def = 0,},
	{	.id = V4L2_CID_EXPOSURE_AUTO, 
		.max = 1, 
		.mask = 0x0, 
		.def = 1,},
	{  
	   .id = V4L2_CID_SCENE_MODE, 
	   .max = V4L2_SCENE_MODE_TEXT, 
	   .mask = 0x0, 
	   .def = 0,
	},
#if 1
	{	.id = V4L2_CID_FLASH_LED_MODE, 
		.max = 3,
		.mask = 0x0,
		.def = 0,},
#endif
	{
	.id = V4L2_CID_POWER_LINE_FREQUENCY, 
	.max = V4L2_CID_POWER_LINE_FREQUENCY_AUTO, 
	.mask = 0x0,
	.def = V4L2_CID_POWER_LINE_FREQUENCY_AUTO,},
};


#endif /* __MODULE_DIFF_H__ */
